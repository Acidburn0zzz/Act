#!/usr/bin/perl -w
use strict;
use Act::Config;
use Act::User;
use Act::Talk;
use DBI;
use Getopt::Long;
use List::Util 'min';
$|++;

# command-line parameters
my %conf = ( quiet => 0, );
GetOptions( \%conf, "quiet!" )
  or die << 'EOT';
Valid options:
  --quiet         - be quiet
EOT

# init the database handle
$Request{dbh} = DBI->connect(
    $Config->database_dsn, $Config->database_user,
    $Config->database_passwd, { AutoCommit => 0 }
  )
  or die "can't connect to database: " . $DBI::errstr;

# match functions
# given two user objects, return true if they could be the same
my %match = (
    email => sub {
        my ( $a, $b ) = @_;
        return 1 if $a->{__email} eq $b->{__email};
    },
    name => sub {
        my ( $a, $b ) = @_;
        return 1 if $a->{__fullname} eq $b->{__fullname};
    },
    nick => sub {
        my ( $a, $b ) = @_;
        return 0 unless $a->{__nick};
        return 1 if $a->{__nick} eq $b->{__nick};
    },
);

# fetch all users
my @users = @{ Act::User->get_items() };
message( scalar @users, "users found\n" );
message("Normalising users\n");

# normalise users
normalise(@users);

# match
my $total = @users;
message( "Using comparison functions:", keys %match, "\n" );

my $suspects = {};
while (@users) {
    message(
        sprintf "Comparing users... %3d%%\r",
        100 * ( $total - @users ) / $total
    );
    my $u = shift @users;
    for my $func ( keys %match ) {
        for my $v (@users) {
            if( $match{$func}->( $u, $v ) ) {
                my ( $old, $new ) =
                  $u->{__id} < $v->{__id} ? ( $u, $v ) : ( $v, $u );
                $new->{__id} = $old->{__id};
                push @{ $suspects->{ $old->{__id} } ||= [ $old ] }, $new;
            }
        }
    }
}
message("Comparing users... 100%\n\n");

# show the results
for my $u ( sort { $a->[0]{__id} <=> $b->[0]{__id} } values %$suspects ) {
    print "# Are these users the same? ",
      join( " ", map( { $_->user_id } @$u ) ), "\n";
    no warnings;
    printf "- %3d %s %s (%s) <%s> (%d talks)\n", $_->user_id, $_->first_name,
      $_->last_name, $_->nick_name, $_->email, scalar @{ $_->talks }
      for sort { $a->user_id <=> $b->user_id } @$u;
    print "\n";
}

sub message { print "@_" unless $conf{quiet}; }

sub normalise {
    for my $u (@_) {
        $u->{__fullname}     = lc( $u->first_name . " " . $u->last_name );
        $u->{__nick}         = lc $u->nick_name;
        $u->{__email}        = lc $u->email;
        $u->{__id}           = $u->user_id;
    }
}

__END__


