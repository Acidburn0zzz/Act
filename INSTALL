Installing Act on your system
-----------------------------

Install (or cvs checkout) Act in a directory. In this document we'll
use /home/act, and refer to it as Act's home directory.

The required modules are tested for in t/01cpan.t. You'll find the
complete and up-to-date list of prerequisite in that file.

First thing is to enable Perl (and mod_perl) to find the Act modules
and to map Act::Foo to /home/act/lib/Foo.pm.

    mkdir ~/lib; ln -s /home/act/lib lib/Act; export PERL5LIB=~/lib

Act needs to know its home directory so that it can find its
configuration file. This is done by setting the ACTHOME environment variable:

    export ACTHOME=/home/act

Make sure both ACTHOME and PERL5LIB are set and exported when
running httpd or 'make test'.

Next, define a virtual host in your Apache configuration file
(httpd.conf) for Act. Here's an example:

    <VirtualHost *>
      ServerName   localhost
      ServerAdmin  webmaster@example.com
      DocumentRoot /home/act/wwwdocs
      Include      /home/act/conf/httpd.conf
    </VirtualHost>

For code development it is useful to install the Apache::Reload
module. Enable it in httpd.conf (outside of any VirtualHost
containers):

    PerlModule Apache::Reload
    PerlInitHandler Apache::Reload
    PerlSetVar ReloadAll Off

Then and add this inside Act's VirtualHost container:

    PerlSetVar ReloadModules "Act::*"

If you don't want to mess with name-based virtual hosts and DNS,
an easy setup is to use a port-based virtual host:

    Listen 9000
    <VirtualHost *:9000>
      Port 9000
      ServerName   localhost
      ServerAdmin  webmaster@example.com
      DocumentRoot /home/act/wwwdocs
      Include      /home/act/conf/httpd.conf
    </VirtualHost>

Create the directory where photos will be uploaded, by default
$ACTHOME/wwwdocs/photos. Make sure it is readable by all, and
writable by the user running Apache.

Next, create a local configuration file in $ACTHOME/conf/local.ini.
This file is not part of the distribution: its contents override
the global settings in $ACTHOME/conf/act.ini. If you have no need
to override these standard settings, local.ini isn't needed.

You are now ready to install and configure the database system.
See the details in database/INSTALL.<db> (where <db> is one of
Pg, MySQL...).

In the end, you must have the following section in your conf/act.ini
or conf/local.ini file:

    [database]
    dsn    = <dsn>
    user   = <db user>
    passwd = <db password>

To make sure that your system has all the requirements to run Act,
and that Act works correctly on it, you can now run Act's test suite.
This test suite requires Test::More.

    cd $ACTHOME
    make test

Performance hints
-----------------

The following describes steps you can take to get the best performance
out of your Act installation, in a production environment. Full
explanations of the techniques used are outside of the scope of this
document, so we only provide introductory comments.

* pre-loading modules at Apache startup

Insert the following configuration directive in httpd.conf:

PerlModule $ACTHOME/conf/startup.pl

This improves performance (modules are pre-loaded at server startup)
and memory usage (modules are loaded in the parent server and thanks
to copy-on-write their code is shared, at least for a while).

* Dual Apache setup

mod_perl-enabled servers tend to have a large memory footprint, so you don't
want too many of them. Server instances tend to spend most of their time
serving responses to slow clients ("spoon-feeding" clients). 

This setup uses 2 instances of Apache: the front-end, or "light" server
serves static content (images, CSS files), and reverse-proxies dynamic
content to the back-end, or "heavy" server.

The light server uses mod_proxy but no mod_perl, therefore its memory
footprint is much lower. The heavy server sends its output to the light
server very fast, so it isn't tied up spoon-feeding the clients. With such
a setup it is possible to serve a high request rate with relatively few
back-end processes.

In the example below we choose to run both instances on the same machine.
The heavy server runs on localhost on a high port, while the light server
runs on our public IP on port 80. This also provides protection against
direct access to the heavy server.

Here's the relevant configuration snippet for the heavy server:

  BindAddress     127.0.0.1
  KeepAlive       Off

You want to keep KeepAlive Off so as not to keep server processes tied
up doing nothing.

  MinSpareServers     5
  MaxSpareServers     5
  StartServers        10
  MaxClients          20
  MaxRequestsPerChild 500

These numbers are only an indication, tailor them to your requirements
and amount of available RAM. We keep MaxClients low because that's
the whole point of this setup, and MaxRequestsPerChild low to improve
sharing.

  PerlRequire /home/apache/conf/startup.pl
  Listen 9000
  <VirtualHost 127.0.0.1:9000>
    ServerName    www.example.com
    DocumentRoot  /home/act/wwwdocs
    Port          80
    Include       /home/act/conf/httpd.conf
  </VirtualHost>

In this context, the Listen directive specifies which port this server
listens to, and the Port directive specifies which port to use when issuing a
redirect.

In the light server, enable mod_proxy and mod_rewrite. We'll use them
to reverse-proxy requests for dynamic content to the back-end. Again,
adjust the numbers to your requirements and hardware.

  MinSpareServers 10
  MaxSpareServers 15
  StartServers    100
  MaxClients      200

  <VirtualHost *:80>
    ServerName    www.example.com
    DocumentRoot  /home/act/wwwdocs

    RewriteEngine       on
    RewriteOptions      'inherit'
    RewriteRule         \.(css|gif|ico|jpg|pdf|png|txt)$    -                        [L]
    RewriteRule         ^/(.*)$                             http://127.0.0.1:8000/$1 [P,L]
    ProxyPassReverse    /  http://www.example.com/
  </VirtualHost>
